



In React Native, TextInput is a fundamental component used to enable users to input text. It provides a way for users to enter single-line or multi-line text through a keyboard interface. TextInput is a part of the React Native core components library and is commonly used in building forms, chat applications, search bars, and more.







// Define a string containing a floating point number
let numString = "3.14";

// Use parseFloat to convert the string to a floating point number
let num = parseFloat(numString);

// Log the result
console.log(num); // Output: 3.14

In this example, the `parseFloat()` function takes a string `"3.14"` as input and returns the corresponding floating point number `3.14`. It parses the string until it encounters a character that cannot be part of a floating-point number, and then it stops. If the string does not start with a valid float number, `parseFloat()` returns `NaN` (Not a Number).




let num = 3.14159265359;

// Using toFixed to format the number to two decimal places
let formattedNum = num.toFixed(2);

console.log(formattedNum); // Output: "3.14"






FlatList is a component used to render a scrolling list of data efficiently.

data:- This prop specifies the array of data that the FlatList will render.

keyExtractor={item => item.name}:- This prop tells the FlatList how to extract a unique key for each item in the data array. In this case, it's using the name property of each currency object as the key.


renderItem:-  this prop is equal to a function and this function returns some jsx.  
              In ScrollView we need key, but   
in FlatList we do not need to specifically output  the key on any JSX as FlatList automatically look at data(array) for a key property and automatically add the key.


Here's an example of using these compulsory props:
1. data
2. renderItem
3. keyExtractor
<FlatList
  data={dataArray}
  renderItem={({ item }) => <ListItem title={item.title} />}
  keyExtractor={(item) => item.id.toString()}
/>



Yes, in React Native, Pressable can be considered as an alternative to Button, but they serve slightly different purposes and have different features.



isNaN(123);     // false, since 123 is a number
isNaN('Hello'); // true, since 'Hello' cannot be converted into a number
isNaN('123');   // false, since '123' can be converted into a number (123)
isNaN(NaN);     // true, since NaN is not a valid number
